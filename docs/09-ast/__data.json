{"type":"data","nodes":[null,{"type":"data","data":[{"docs":1},[2,5,8,11,14,17,20,23,26,29],{"slug":3,"markdown":4},"01-getting-started","# Getting started\n\n## Install\n\n```sh\nnpm install svelte-exmarkdown\n# yarn add svelte-exmarkdown\n# pnpm add svelte-exmarkdown\n```\n\n## Basic usage\n\n```svelte\n\u003Cscript>\n\timport Markdown from 'svelte-exmarkdown';\n\tlet md = $state('# Hello world!');\n\u003C/script>\n\n\u003Ctextarea bind:value={md}>\u003C/textarea>\n\u003CMarkdown {md} />\n```\n\nwith GFM(GitHub Flavored Markdown)\n\nIf you want to use tables, checkboxes, etc., you can use the GFM plugin.\n\n```svelte\n\u003Cscript>\n\timport Markdown from 'svelte-exmarkdown';\n\timport { gfmPlugin } from 'svelte-exmarkdown/gfm';\n\tlet md = $state('# Hello world!');\n\tconst plugins = [gfmPlugin()];\n\u003C/script>\n\n\u003Ctextarea bind:value={md}>\u003C/textarea>\n\u003CMarkdown {md} {plugins} />\n```\n",{"slug":6,"markdown":7},"02-plugin-overview","# Plugin overview\n\nThis library uses [unified](https://github.com/unifiedjs/unified).\nTherefore, you can use [remark](https://github.com/remarkjs/remark) or [rehype](https://github.com/rehypejs/rehype) plugins.\n\nAnd you can custom hast(Hypertext AST) to svelte component mapping.\n\n## Rendering flow\n\n```mermaid\nflowchart TD\n  Markdown -- string --> remark-parse\n  subgraph unified\n    remark-parse -- mdast --> remarkPlugins\n    remarkPlugins -- mdast --> remark-rehype\n    remark-rehype -- hast --> rehypePlugins\n  end\n  rehypePlugins -- hast-component-mapping --> SvelteComponent\n```\n\n## Plugin API\n\nYou can make a plugin with the following API.\n\n```ts\nimport type { ComponentType, SvelteComponent } from 'svelte';\nimport type { Pluggable } from 'unified';\nexport type ComponentsMap = Record\u003Cstring, ComponentType\u003CSvelteComponent>>;\nexport type Plugin = {\n\tremarkPlugin?: Pluggable;\n\trehypePlugin?: Pluggable;\n\trenderer?: ComponentsMap;\n};\n```\n\nAnd you can set multiple plugins into `plugins` props.\n\n```svelte\n\u003Cscript lang=\"ts\">\n\timport Markdown from 'svelte-exmarkdown';\n\timport type { Plugin } from 'svelte-exmarkdown';\n\tconst plugins: Plugin[] = [];\n\u003C/script>\n\n\u003CMarkdown md=\"# Hello world\" {plugins} />\n```\n\n### Example\n\nThe GFM plugin is in the library. It is implemented as follows.\n\n```ts\nimport remarkGfm from 'remark-gfm';\nimport type { Plugin } from '../types';\nexport const gfmPlugin: Plugin = { remarkPlugin: [remarkGfm] };\n```\n",{"slug":9,"markdown":10},"03-raw-html","# Plugin showcase (Raw HTML)\n\nIf you trust the input and you want to use raw HTML, you can use the [rehype-raw](https://github.com/rehypejs/rehype-raw) plugin.\n\n> The [CommonMark specification](https://spec.commonmark.org/) allows raw HTML by default, but this library doesn't allow raw HTML by default. This is because raw HTML has potential security issues.\n\n:raw-html\n",{"slug":12,"markdown":13},"04-skip-render","# Skip rendering the element\n\nIf you want to skip rendering the element, you can use `renderer` prop.\n\nYou can use `null` to skip rendering the element.\n\n:skip-rendering\n\n## Allowlist and Denylist\n\nYou can use `allowlist` and `denylist` to control which elements are allowed to render.\n\nThis example is same as above.\n\n:denylist\n\nIf you want to support only some elements, you can use `allowlist`.\n\n:allowlist\n",{"slug":15,"markdown":16},"05-transparent","# Transparent component\n\nIf you want to render a component without any wrapper element, you can use the `Transparent` component.\nThis component is convenient when you want to disable some syntax.\n\n:transparent\n",{"slug":18,"markdown":19},"06-components-map","# Components map\n\nAs you've seen so far, you can customize renderer via `renderer` object.\n\nIf you set HTML tag name as a value of `renderer` object, it will be rendered as is.\n\n:components-map\n",{"slug":21,"markdown":22},"07-code-highlight","# Plugin showcase (Code highlight)\n\nIf you want to highlight code, you can use the [rehype-highlight](https://github.com/rehypejs/rehype-highlight) plugin.\n\n:code-highlight\n",{"slug":24,"markdown":25},"08-math-formula","# Plugin showcase (Math formula)\n\nIf you want to render math formula, you can use [remark-math](https://github.com/remarkjs/remark-math) and [rehype-katex](https://github.com/remarkjs/remark-math/tree/main/packages/rehype-katex) plugins.\nOffcourse, you can use [rehype-mathjax](https://github.com/remarkjs/remark-math/tree/main/packages/rehype-mathjax) instead of rehype-katex.\n\n:math-formula\n",{"slug":27,"markdown":28},"09-ast","# Access to the AST\n\nYou can access the AST in the your custom component by using the `getAstNode` function.\n\nIt makes powerful to create custom components.\n\n```svelte\n\u003C!-- DumpAst.svelte -->\n\u003Cscript lang=\"ts\">\n\timport { getAstNode } from 'svelte-exmarkdown';\n\n\tconst astContext = getAstNode();\n\u003C/script>\n\n\u003C!-- Dump current node -->\n\u003Cpre>{JSON.stringify(astContext.current, null, 2)}\u003C/pre>\n```\n\n:ast\n",{"slug":30,"markdown":31},"10-shiki","# Plugin showcase (Shiki)\n\nIf you want to highlight code with [Shiki](https://shiki.style/), you can do it like this:\n\n:shiki\n\nOr you can use Shiki without asynchrony:\n\n:shiki-sync\n"],"uses":{}},null]}
